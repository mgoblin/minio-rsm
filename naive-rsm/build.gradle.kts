/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    `java-library`
    jacoco
}

val minioSdkVersion by extra { "8.5.7" }
val minioContainerVersion by extra {"1.20.1"}
val apacheCommonsLangVersion by extra { "3.13.0" }
val apacheCommonsValidatorVersion by extra { "1.8.0" }
val apacheCommonsIOVersion by extra { "2.15.0" }
val kafkaVersion by extra { "3.7.0" }
val slf4jVersion by extra { "1.7.36" }
val junitVersion by extra { "5.10.0" }
val junitPlatformVersion by extra { "1.10.0" }
val assertJVersion by extra { "3.24.2" }
val mockitoVersion by extra { "5.5.0" }
val logbackVersion by extra {"1.2.3"}

sourceSets {
    create("intTest") {
        compileClasspath += sourceSets.main.get().output
        runtimeClasspath += sourceSets.main.get().output
    }
}

val intTestImplementation by configurations.getting {
    extendsFrom(configurations.implementation.get())
}
val intTestRuntimeOnly by configurations.getting

configurations["intTestRuntimeOnly"].extendsFrom(configurations.runtimeOnly.get())


dependencies {
    implementation("org.apache.commons:commons-lang3:${apacheCommonsLangVersion}")
    implementation("commons-validator:commons-validator:${apacheCommonsValidatorVersion}")
    implementation ("commons-io:commons-io:${apacheCommonsIOVersion}")

    implementation ("io.minio:minio:${minioSdkVersion}")

    compileOnly("org.apache.kafka:kafka-clients:${kafkaVersion}")
    compileOnly("org.apache.kafka:kafka-storage-api:${kafkaVersion}")

    compileOnly("org.slf4j:slf4j-api:${slf4jVersion}")

    intTestImplementation("org.junit.jupiter:junit-jupiter:${junitVersion}")

    intTestImplementation("org.apache.kafka:kafka-storage-api:${kafkaVersion}")
    intTestImplementation("org.apache.kafka:kafka-clients:${kafkaVersion}")

    intTestImplementation("org.testcontainers:minio:${minioContainerVersion}")
    intTestImplementation("org.testcontainers:testcontainers:${minioContainerVersion}")
    intTestImplementation("org.testcontainers:junit-jupiter:${minioContainerVersion}")

    intTestRuntimeOnly("org.junit.platform:junit-platform-launcher")
    intTestRuntimeOnly("ch.qos.logback:logback-classic:${logbackVersion}")


    testImplementation("org.apache.kafka:kafka-clients:${kafkaVersion}")
    testImplementation("org.apache.kafka:kafka-storage-api:${kafkaVersion}")

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testImplementation("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    testImplementation("org.assertj:assertj-core:${assertJVersion}")

    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")

}

base {
    archivesName = "minio-naive-rsm"
    version = "0.1.0"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    finalizedBy("jacocoTestReport")
}

val integrationTest = tasks.register<Test>("integrationTest") {
    description = "Runs the integration tests."
    group = "verification"
    testClassesDirs = sourceSets["intTest"].output.classesDirs
    classpath = sourceSets["intTest"].runtimeClasspath

    shouldRunAfter("test")

    useJUnitPlatform()

    // Run always.
    outputs.upToDateWhen { false }
}

tasks.check {
    dependsOn(integrationTest)
    finalizedBy(tasks.jacocoTestCoverageVerification)
}

integrationTest {
    finalizedBy("integrationTestReport")
}

tasks.jacocoTestReport {
    executionData(tasks.test.get())
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir("reports/coverage/unitTests")
    }
}

tasks.create<JacocoReport>("integrationTestReport") {
    executionData(tasks.named("integrationTest").get())
    sourceSets(sourceSets.main.get())
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir("reports/coverage/integrationTests")
    }
}

//tasks.jacocoTestCoverageVerification {
//    executionData(tasks.test.get())
//    violationRules {
//        rule {
//            element = "CLASS"
//            limit {
//                counter = "BRANCH"
//                value = "COVEREDRATIO"
//                minimum = "1.0".toBigDecimal()
//            }
//        }
//    }
//}

